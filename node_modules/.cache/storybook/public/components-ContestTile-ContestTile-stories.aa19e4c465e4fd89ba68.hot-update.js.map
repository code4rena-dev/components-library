{"version":3,"file":"components-ContestTile-ContestTile-stories.aa19e4c465e4fd89ba68.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AA1FA;AA4FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAGA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AA3NA;AA6NA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://c4-ui/./src/components/ContestTile/ContestTile.tsx"],"sourcesContent":["import clsx from \"clsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport \"./ContestTile.scss\";\nimport ContestStatus from \"../ContestStatus/ContestStatus\";\nimport {\n  ContestSchedule,\n  ContestTileProps,\n  ContestTileVariant,\n  CountdownProps,\n} from \"./ContestTile.types\";\nimport { getDates } from \"../../utils/time\";\nimport { Status } from \"../ContestStatus/ContestStatus.types\";\nimport {\n  formatDistanceToNow,\n  formatDistanceToNowStrict,\n  isBefore,\n} from \"date-fns\";\nimport { DropdownLink } from \"../Dropdown/Dropdown.types\";\nimport Dropdown from \"../Dropdown/Dropdown\";\n\n/**\n * Contest tile time tracker displayed right next to the contest status in the contest tile footer.\n *\n * @param start - Contest start date string value.\n * @param end - Contest end date string value.\n * @param text - Display text representing time until start of contest or remaining time before end of contest.\n * @param updateContestStatus - callback function to trigger any necessary updates based on timer changes.\n */\nconst Countdown = ({\n  start,\n  end,\n  text,\n  updateContestStatus,\n}: CountdownProps) => {\n  const [lessThan24h, setLessThan24h] = useState(false);\n  const [contestTimer, setContestTimer] = useState<ContestSchedule>();\n\n  const getCountdownTarget = (schedule: ContestSchedule): Date => {\n    if (schedule.contestStatus === Status.LIVE) {\n      return schedule.end;\n    }\n    return schedule.start;\n  };\n\n  /**\n   * Formats the remaining time to display in Hours:Minutes:Seconds whenever there is less than a day remaining for a contest.\n   *\n   * @param secondsText - Text string returned from formatDistanceToNowStrict method from date-fns with the unit option set to seconds.\n   *\n   * @returns a formatted date string.\n   */\n  function formatSeconds(secondsText: string) {\n    let secsToNum = Number(secondsText.split(\" \")[0]);\n    const hours = Math.floor(secsToNum / 3600);\n    secsToNum %= 3600;\n    const minutes = Math.floor(secsToNum / 60);\n    secsToNum %= 60;\n\n    return `${hours < 10 ? `0${hours}` : hours}:${\n      minutes < 10 ? `0${minutes}` : minutes\n    }:${secsToNum < 10 ? `0${secsToNum}` : secsToNum}`;\n  }\n\n  const countDown = useCallback(() => {\n    const newTimer = getDates(start, end);\n    const target = getCountdownTarget(newTimer);\n    return formatDistanceToNow(target, { includeSeconds: true });\n  }, [start, end]);\n\n  const [formattedCountdown, setFormattedCountdown] = useState(countDown);\n\n  useEffect(() => {\n    const timer = setInterval(\n      () => {\n        const newTimer = getDates(start, end);\n        if (\n          contestTimer &&\n          (contestTimer.contestStatus !== newTimer.contestStatus ||\n            contestTimer.botRaceStatus !== newTimer.botRaceStatus)\n        ) {\n          setContestTimer(newTimer);\n          if (updateContestStatus) {\n            updateContestStatus();\n          }\n        }\n        if (newTimer.contestStatus === Status.ENDED) {\n          clearInterval(timer);\n          return;\n        }\n        const target = getCountdownTarget(newTimer);\n        // Get total number of seconds remaining\n        const totalSeconds = formatDistanceToNowStrict(target, {\n          unit: \"second\",\n        }).split(\" \")[0];\n        // If more than 24 hours are remaining, show days remaining\n        if (Number(totalSeconds) > 86400) {\n          setFormattedCountdown(\n            formatDistanceToNow(target, { includeSeconds: true })\n          );\n        } else {\n          // If less than 24 hours are remaining, update countdown every second\n          setLessThan24h(true);\n          setFormattedCountdown(\n            formatSeconds(formatDistanceToNowStrict(target, { unit: \"second\" }))\n          );\n        }\n      },\n      lessThan24h ? 1000 : 10000\n    ); // 10 second precision if more than 1 day remaining, else 1 second precision`\n    return () => clearInterval(timer);\n  }, [lessThan24h, start, end, contestTimer, updateContestStatus]);\n\n  return (\n    <div className=\"countdown\">\n      {text && text}\n      <span>{formattedCountdown}</span>\n    </div>\n  );\n};\n\n/**\n * A stylized Code4rena contest tile for displaying information pertaining to upcoming, live, and finalized contests.\n * This component has 2 available variants.\n *\n * __Available variants:__\n * - `LIGHT`\n * - `DARK`\n *\n * @param htmlId - An html `id` for the contest tile's wrapping div.\n * @param variant - Style variant to be applied to rendered component.\n * @param codeAccess - String indicating required access for viewing contest.\n * @param isUserCertified - Boolean indicating certification status of logged in user. Required for viewing certain contests.\n * @param contestId - Unique numerical identifier for the current contest.\n * @param sponsorImage - Image url for contest's sponsor.\n * @param sponsorUrl - External url to the sponsor's page (Twitter, etc.).\n * @param contestUrl - Absolute url or relative path to the page of the current contest.\n * @param contestRepo - Absolute url to the contest's GitHub repository.\n * @param findingsRepo - Absolute url to the contest's findings.\n * @param title - Title for the current contest.\n * @param description - Description for the current contest.\n * @param amount - Reward pool for the current contest.\n * @param status - Active status of the current contest. @see {@link Status}.\n * @param startDate - Date string for the current contest's start date.\n * @param endDate - Date string for the current contest's end date.\n * @param updateContestStatus - Callback function to be triggered on contest time/status changes.\n */\nconst ContestTile: React.FC<ContestTileProps> = ({\n  htmlId,\n  variant,\n  codeAccess,\n  isUserCertified,\n  contestId,\n  sponsorImage,\n  sponsorUrl,\n  contestUrl,\n  contestRepo,\n  findingsRepo,\n  title,\n  description,\n  amount,\n  startDate,\n  endDate,\n  updateContestStatus,\n}) => {\n  const [canViewContest, setCanViewContest] = useState(false);\n  const [contestTimelineObject, setContestTimelineObject] =\n    useState<ContestSchedule>(getDates(startDate, endDate));\n  const [dropdownLinks, setDropdownLinks] = useState<DropdownLink[]>([]);\n  const [hasBotRace, setHasBotRace] = useState(false);\n\n  const wrapperStyling = clsx({\n    c4contesttile: true,\n    \"tile--light\": variant === ContestTileVariant.LIGHT,\n    \"tile--dark\": variant === ContestTileVariant.DARK,\n  });\n\n  useEffect(() => {\n    setHasBotRace(codeAccess === \"public\" && contestId !== 252);\n  }, [codeAccess, contestId]);\n\n  useEffect(() => {\n    if (codeAccess === \"public\") {\n      setCanViewContest(true);\n    } else if (codeAccess === \"certified\" && isUserCertified) {\n      setCanViewContest(true);\n    } else {\n      setCanViewContest(false);\n    }\n  }, [codeAccess, isUserCertified]);\n\n  useEffect(() => {\n    const links: DropdownLink[] = [];\n    if (contestTimelineObject.contestStatus !== Status.LIVE) {\n      setDropdownLinks(links);\n      return;\n    }\n    if (contestRepo && canViewContest) {\n      links.push({\n        label: \"View Repo\",\n        href: contestRepo,\n        external: true,\n        ariaLabel: \"Go to audit competition repo (Opens in a new window)\",\n      });\n    }\n    if (hasBotRace && isBefore(new Date(), contestTimelineObject.botRaceEnd)) {\n      links.push({\n        label: \"Submit Bot Race report\",\n        href: `${contestUrl}/submit/bot`,\n      });\n    }\n    if (\n      findingsRepo &&\n      canViewContest &&\n      (!hasBotRace || contestTimelineObject.botRaceStatus === Status.ENDED)\n    ) {\n      links.push({\n        label: \"Submit finding\",\n        href: `${contestUrl}/submit`,\n      });\n    }\n    if (\n      findingsRepo &&\n      canViewContest &&\n      (!hasBotRace || contestTimelineObject.botRaceStatus === Status.ENDED)\n    ) {\n      links.push({\n        label: \"Submit Analysis report\",\n        href: `${contestUrl}/submit/analysis`,\n      });\n    }\n    setDropdownLinks(links);\n  }, [\n    hasBotRace,\n    contestTimelineObject,\n    canViewContest,\n    findingsRepo,\n    contestUrl,\n    contestId,\n    contestRepo,\n  ]);\n\n  useEffect(() => {\n    const newTimelineObject = getDates(startDate, endDate);\n    setContestTimelineObject(newTimelineObject);\n  }, [startDate, endDate]);\n\n  const updateContestTileStatus = useCallback(() => {\n    if (updateContestStatus) {\n      updateContestStatus();\n    }\n    const newTimelineObject = getDates(startDate, endDate);\n    setContestTimelineObject(newTimelineObject);\n  }, [startDate, endDate, updateContestStatus]);\n\n  return (\n    <div id={htmlId ?? undefined} className={wrapperStyling}>\n      <div className=\"tile--body\">\n        <header>\n          {sponsorUrl ? (\n            <a\n              href={sponsorUrl}\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n              className=\"tile--body--logo\"\n            >\n              <img\n                alt=\"Sponsor logo\"\n                src={sponsorImage ?? \"/\"}\n                width={88}\n                height={88}\n              />\n            </a>\n          ) : (\n            <img\n              alt=\"Sponsor logo\"\n              className=\"tile--body--logo\"\n              src={sponsorImage ?? \"/\"}\n              width={88}\n              height={88}\n            />\n          )}\n          <div>\n            <small className=\"tile--body--period\">\n              {contestTimelineObject.formattedStart} -{\" \"}\n              {contestTimelineObject.formattedEnd}{\" \"}\n              {contestTimelineObject.timeZone}\n            </small>\n            <h2 className=\"tile--body--title\">\n              <a href={`${contestUrl}#top`}>{title}</a>\n            </h2>\n            <p className=\"tile--body--description\">\n              {description}{\" \"}\n              {hasBotRace &&\n                (contestTimelineObject.botRaceStatus === Status.UPCOMING ||\n                  contestTimelineObject.botRaceStatus === Status.LIVE) && (\n                  <span className=\"tile--body--botracestatus\">\n                    <img\n                      alt=\"Wolf bot\"\n                      src=\"/icons/wolfbot.svg\"\n                      height={16}\n                      width={16}\n                    />\n                    {contestTimelineObject.botRaceStatus === Status.UPCOMING &&\n                      \"1st hour: Bot Race\"}\n                    {contestTimelineObject.botRaceStatus === Status.LIVE &&\n                      \"Bot Race live\"}\n                  </span>\n                )}\n            </p>\n          </div>\n        </header>\n        <p className=\"tile--body--amount\">{amount}</p>\n      </div>\n      <footer className=\"tile--footer\">\n        <div className=\"tile--footer--details\">\n          <ContestStatus\n            className={`tile--footer--status ${clsx(\n              contestTimelineObject.contestStatus === Status.ENDED && \"ended\"\n            )}`}\n            status={contestTimelineObject.contestStatus}\n          />\n          {contestTimelineObject.contestStatus !== Status.ENDED && (\n            <p className=\"tile--footer--timer\">\n              <Countdown\n                start={startDate}\n                end={endDate}\n                updateContestStatus={updateContestTileStatus}\n                text={\n                  contestTimelineObject.contestStatus === Status.UPCOMING\n                    ? \"Starts in \"\n                    : \"Ends in \"\n                }\n              />\n            </p>\n          )}\n        </div>\n        <div className=\"tile--footer--options\">\n          <a\n            className=\"tile--footer--contestredirect\"\n            aria-label=\"View competition\"\n            href={`${contestUrl}#`}\n          >\n            {!findingsRepo || findingsRepo === \"\" ? \"Preview\" : \"View\"}{\" \"}\n            competition\n          </a>\n          {dropdownLinks.length > 0 && (\n            <Dropdown\n              triggerButton={\n                <img\n                  src=\"/icons/ellipsis.svg\"\n                  alt=\"Options icon\"\n                  width={32}\n                  height={32}\n                />\n              }\n              triggerAriaLabel=\"See more contest options\"\n              hideDownArrow={true}\n              openOnHover={true}\n              links={dropdownLinks}\n            />\n          )}\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nContestTile.defaultProps = {\n  htmlId: \"\",\n  /* @ts-ignore */\n  variant: \"DARK\",\n  sponsorImage: undefined,\n  sponsorUrl: undefined,\n};\n\nexport default ContestTile;\n"],"names":[],"sourceRoot":""}