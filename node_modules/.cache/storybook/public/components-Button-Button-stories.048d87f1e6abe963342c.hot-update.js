"use strict";
self["webpackHotUpdatec4_ui"]("components-Button-Button-stories",{

/***/ "./src/components/Button/Button.stories.tsx":
/*!**************************************************!*\
  !*** ./src/components/Button/Button.stories.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Buttons: () => (/* binding */ Buttons),
/* harmony export */   Links: () => (/* binding */ Links),
/* harmony export */   SampleComponent: () => (/* binding */ SampleComponent),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Button */ "./src/components/Button/Button.tsx");
/* harmony import */ var _Button_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Button.types */ "./src/components/Button/Button.types.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");






const wrapperStyle = {
  display: "flex",
  gap: "10px",
  flexWrap: "wrap",
  justifyContent: "center",
  alignItems: "center"
};
const meta = {
  component: _Button__WEBPACK_IMPORTED_MODULE_1__["default"],
  title: "Button",
  tags: ["autodocs"],
  argTypes: {
    label: {
      control: "text"
    },
    type: {
      control: "radio"
    },
    variant: {
      control: "radio"
    },
    disabled: {
      control: "boolean"
    },
    iconLeft: {
      control: "text"
    },
    iconRight: {
      control: "text"
    },
    size: {
      control: "radio"
    },
    href: {
      control: "text"
    },
    external: {
      control: "boolean"
    },
    onClick: {
      control: "function"
    },
    className: {
      control: "text"
    }
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
const SampleComponent = args => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
  ...args
});
SampleComponent.displayName = "SampleComponent";
SampleComponent.parameters = {
  docs: {
    canvas: {
      sourceState: "shown"
    }
  }
};
SampleComponent.args = {
  variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.PRIMARY,
  label: "Sample Button",
  type: "button",
  external: false,
  href: "",
  disabled: false,
  iconLeft: "",
  iconRight: "/icons/edit.svg",
  size: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonSize.NARROW,
  onClick: () => console.log("Sample button clicked!"),
  className: ""
};

/**
 * Below is a collection of the different states in which you can find C4 links. A button becomes a link once an `href` property is provided to the component.
 * - __Internal__: An internal link handles in-app navigation.
 * - __External__: An external link will open the provided href in a new tab.
 * - __Icons__: All links can take icons on either (or both) sides of the label.
 *
 * __Link-specific props:__
 * - `href`
 * - `external`
 */
const Links = {
  render: args => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
      style: wrapperStyle,
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.PRIMARY,
        label: "Internal Link",
        href: "#internal-test"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.PRIMARY,
        external: true,
        label: "External Link",
        href: "https://google.com"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.PRIMARY,
        href: "#internal-test",
        label: "Link W/ Icons",
        iconLeft: "/icons/edit/16.svg",
        iconRight: "/icons/edit/16.svg"
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
      style: wrapperStyle,
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.SECONDARY,
        label: "Internal Link",
        href: "#internal-test"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.SECONDARY,
        external: true,
        label: "External Link",
        href: "https://google.com"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.SECONDARY,
        href: "#internal-test",
        label: "Link W/ Icons",
        iconLeft: "/icons/edit/16.svg",
        iconRight: "/icons/edit/16.svg"
      })]
    })]
  })
};
Links.argTypes = {
  label: {
    control: false
  },
  type: {
    control: false
  },
  variant: {
    control: false
  },
  disabled: {
    control: false
  },
  iconLeft: {
    control: false
  },
  iconRight: {
    control: false
  },
  size: {
    control: false
  },
  href: {
    control: false
  },
  external: {
    control: false
  },
  onClick: {
    control: false
  },
  className: {
    control: false
  }
};

/**
 * Below is a collection of the different states in which you can find C4 buttons.
 * - __Enabled__: The natural state of any active button.
 * - __Disabled__: The state of a button that has its `disabled` prop set to true.
 * - __Icons__: All buttons can take icons on either (or both) sides of the label.
 *
 * __Button-specific props:__
 * - `onClick`
 * - `disabled`
 * - `type`
 */
const Buttons = {
  render: args => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
      style: wrapperStyle,
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.PRIMARY,
        onClick: () => null,
        label: "Enabled Button"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.PRIMARY,
        onClick: () => null,
        label: "Button W/ Icons",
        iconLeft: "/icons/edit/16.svg",
        iconRight: "/icons/edit/16.svg"
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
      style: wrapperStyle,
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.SECONDARY,
        onClick: () => null,
        label: "Enabled Button"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.SECONDARY,
        onClick: () => null,
        label: "Button W/ Icons",
        iconLeft: "/icons/edit/16.svg",
        iconRight: "/icons/edit/16.svg"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        variant: _Button_types__WEBPACK_IMPORTED_MODULE_2__.ButtonVariant.SECONDARY,
        onClick: () => null,
        label: "Disabled Button",
        disabled: true
      })]
    })]
  })
};
Buttons.argTypes = {
  label: {
    control: false
  },
  type: {
    control: false
  },
  variant: {
    control: false
  },
  disabled: {
    control: false
  },
  iconLeft: {
    control: false
  },
  iconRight: {
    control: false
  },
  size: {
    control: false
  },
  href: {
    control: false
  },
  external: {
    control: false
  },
  onClick: {
    control: false
  },
  className: {
    control: false
  }
};
SampleComponent.parameters = {
  ...SampleComponent.parameters,
  docs: {
    ...SampleComponent.parameters?.docs,
    source: {
      originalSource: "args => <Button {...args} />",
      ...SampleComponent.parameters?.docs?.source
    }
  }
};
Links.parameters = {
  ...Links.parameters,
  docs: {
    ...Links.parameters?.docs,
    source: {
      originalSource: "{\n  render: args => <>\n      {/* Primary */}\n      <div style={wrapperStyle}>\n        <Button variant={ButtonVariant.PRIMARY} label=\"Internal Link\" href=\"#internal-test\" />\n        <Button variant={ButtonVariant.PRIMARY} external label=\"External Link\" href=\"https://google.com\" />\n        <Button variant={ButtonVariant.PRIMARY} href=\"#internal-test\" label=\"Link W/ Icons\" iconLeft=\"/icons/edit/16.svg\" iconRight=\"/icons/edit/16.svg\" />\n      </div>\n      {/* Secondary */}\n      <div style={wrapperStyle}>\n        <Button variant={ButtonVariant.SECONDARY} label=\"Internal Link\" href=\"#internal-test\" />\n        <Button variant={ButtonVariant.SECONDARY} external label=\"External Link\" href=\"https://google.com\" />\n        <Button variant={ButtonVariant.SECONDARY} href=\"#internal-test\" label=\"Link W/ Icons\" iconLeft=\"/icons/edit/16.svg\" iconRight=\"/icons/edit/16.svg\" />\n      </div>\n    </>\n}",
      ...Links.parameters?.docs?.source
    },
    description: {
      story: "Below is a collection of the different states in which you can find C4 links. A button becomes a link once an `href` property is provided to the component.\n- __Internal__: An internal link handles in-app navigation.\n- __External__: An external link will open the provided href in a new tab.\n- __Icons__: All links can take icons on either (or both) sides of the label.\n\n__Link-specific props:__\n- `href`\n- `external`",
      ...Links.parameters?.docs?.description
    }
  }
};
Buttons.parameters = {
  ...Buttons.parameters,
  docs: {
    ...Buttons.parameters?.docs,
    source: {
      originalSource: "{\n  render: args => <>\n      {/* Primary */}\n      <div style={wrapperStyle}>\n        <Button variant={ButtonVariant.PRIMARY} onClick={() => null} label=\"Enabled Button\" />\n        <Button variant={ButtonVariant.PRIMARY} onClick={() => null} label=\"Button W/ Icons\" iconLeft=\"/icons/edit/16.svg\" iconRight=\"/icons/edit/16.svg\" />\n      </div>\n      {/* Secondary */}\n      <div style={wrapperStyle}>\n        <Button variant={ButtonVariant.SECONDARY} onClick={() => null} label=\"Enabled Button\" />\n        <Button variant={ButtonVariant.SECONDARY} onClick={() => null} label=\"Button W/ Icons\" iconLeft=\"/icons/edit/16.svg\" iconRight=\"/icons/edit/16.svg\" />\n        <Button variant={ButtonVariant.SECONDARY} onClick={() => null} label=\"Disabled Button\" disabled />\n      </div>\n    </>\n}",
      ...Buttons.parameters?.docs?.source
    },
    description: {
      story: "Below is a collection of the different states in which you can find C4 buttons.\n- __Enabled__: The natural state of any active button.\n- __Disabled__: The state of a button that has its `disabled` prop set to true.\n- __Icons__: All buttons can take icons on either (or both) sides of the label.\n\n__Button-specific props:__\n- `onClick`\n- `disabled`\n- `type`",
      ...Buttons.parameters?.docs?.description
    }
  }
};
const __namedExportsOrder = ["SampleComponent", "Links", "Buttons"];
try {
    // @ts-ignore
    SampleComponent.displayName = "SampleComponent";
    // @ts-ignore
    SampleComponent.__docgenInfo = { "description": "", "displayName": "SampleComponent", "props": {} };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/components/Button/Button.stories.tsx#SampleComponent"] = { docgenInfo: SampleComponent.__docgenInfo, name: "SampleComponent", path: "src/components/Button/Button.stories.tsx#SampleComponent" };
}
catch (__react_docgen_typescript_loader_error) { }
try {
    // @ts-ignore
    Links.displayName = "Links";
    // @ts-ignore
    Links.__docgenInfo = { "description": "Below is a collection of the different states in which you can find C4 links. A button becomes a link once an `href` property is provided to the component.\n- __Internal__: An internal link handles in-app navigation.\n- __External__: An external link will open the provided href in a new tab.\n- __Icons__: All links can take icons on either (or both) sides of the label.\n\n__Link-specific props:__\n- `href`\n- `external`", "displayName": "Links", "props": {} };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/components/Button/Button.stories.tsx#Links"] = { docgenInfo: Links.__docgenInfo, name: "Links", path: "src/components/Button/Button.stories.tsx#Links" };
}
catch (__react_docgen_typescript_loader_error) { }
try {
    // @ts-ignore
    Buttons.displayName = "Buttons";
    // @ts-ignore
    Buttons.__docgenInfo = { "description": "Below is a collection of the different states in which you can find C4 buttons.\n- __Enabled__: The natural state of any active button.\n- __Disabled__: The state of a button that has its `disabled` prop set to true.\n- __Icons__: All buttons can take icons on either (or both) sides of the label.\n\n__Button-specific props:__\n- `onClick`\n- `disabled`\n- `type`", "displayName": "Buttons", "props": {} };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/components/Button/Button.stories.tsx#Buttons"] = { docgenInfo: Buttons.__docgenInfo, name: "Buttons", path: "src/components/Button/Button.stories.tsx#Buttons" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ })

});