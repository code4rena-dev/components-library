{"version":3,"file":"components-ContestTile-ContestTile-stories.36b850416d0d7b8f5061.hot-update.js","mappings":";;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://c4-ui/./src/components/ContestTile/ContestTile.types.ts"],"sourcesContent":["import { ReactNode } from \"react\";\nimport { Status } from \"../ContestStatus/ContestStatus.types\";\n\nexport enum ContestTileVariant {\n  LIGHT = \"LIGHT\",\n  DARK = \"DARK\",\n}\n\nexport interface ContestTileProps {\n  /** An html `id` for the contest tile's wrapping div. */\n  htmlId?: string;\n  /** Style variant to be applied to rendered component. */\n  variant?: ContestTileVariant;\n  /** String indicating required access for viewing contest. */\n  codeAccess: string;\n  /** Boolean indicating certification status of logged in user. Required for viewing certain contests. */\n  isUserCertified: boolean;\n  /** Unique numerical identifier for the current contest. */\n  contestId: number;\n  /** Image url for contest's sponsor. */\n  sponsorImage?: string;\n  /** External url to the sponsor's page (Twitter, etc.). */\n  sponsorUrl?: string;\n  /** Absolute url or relative path to the page of the current contest. */\n  contestUrl: string;\n  /** Absolute url to the contest's GitHub repository. */\n  contestRepo: string;\n  /** Absolute url to the contest's findings. */\n  findingsRepo: string;\n  /** Title for the current contest. */\n  title: string;\n  /** Description for the current contest. */\n  description: string;\n  /** Reward pool for the current contest. */\n  amount: string;\n  /** Active status of the current contest. */\n  status: Status;\n  /** Date string for the current contest's start date. */\n  startDate: string;\n  /** Date string for the current contest's end date. */\n  endDate: string;\n  /** Callback function to be triggered on contest time/status changes. */\n  updateContestStatus: undefined | (() => void);\n}\n\nexport interface ContestSchedule {\n  contestStatus?: Status;\n  botRaceStatus?: Status;\n  start: Date;\n  end: Date;\n  botRaceEnd: Date;\n  formattedStart: string;\n  formattedEnd: string;\n  timeZone: string;\n  formattedBotRaceEnd: string;\n  formattedDuration: string;\n}\n\nexport interface CountdownProps {\n  start: string;\n  end: string;\n  text?: string | ReactNode;\n  updateContestStatus: () => void;\n}\n"],"names":[],"sourceRoot":""}