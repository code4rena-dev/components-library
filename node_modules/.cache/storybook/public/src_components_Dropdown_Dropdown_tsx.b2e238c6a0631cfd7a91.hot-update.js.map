{"version":3,"file":"src_components_Dropdown_Dropdown_tsx.b2e238c6a0631cfd7a91.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAGA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AAlDA;AAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://c4-ui/./src/components/Dropdown/Dropdown.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { DropdownLink, DropdownProps } from \"./Dropdown.types\";\nimport \"./Dropdown.scss\";\n\n/**\n * Dropdown component to display additional options either onHover or onClick (depending on the `onHover` prop) of the button generated from the `triggerButton` prop.\n *\n * @param wrapperClass - Additional classes for the dropdown's wrapping div element.\n * @param triggerButtonClass - Additional classes for the dropdown's triggering button.\n * @param openOnHover - Boolean indicating whether or not hovering the trigger button will display the dropdown.\n * @param triggerButton - Children to be wrapped by a `button` element.\n * @param triggerAriaLabel - Accessibility label for the dropdown's trigger button.\n * @param hideDownArrow - Boolean indicating whether or not an arrow indicator should be displayed on the trigger button.\n * @param children - Children to be displayed inside the dropdown.\n */\nconst Dropdown = ({\n  wrapperClass,\n  triggerButtonClass,\n  openOnHover,\n  triggerButton,\n  triggerAriaLabel,\n  hideDownArrow,\n  children,\n}: DropdownProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div\n      onMouseEnter={openOnHover ? () => setIsOpen(true) : undefined}\n      onMouseLeave={openOnHover ? () => setIsOpen(false) : undefined}\n      className={clsx(\"c4dropdown\", wrapperClass && wrapperClass)}\n    >\n      <button\n        aria-label={triggerAriaLabel ?? undefined}\n        onClick={() => setIsOpen(!isOpen)}\n        onTouchStart={() => setIsOpen(!isOpen)}\n        className={clsx(\n          \"c4dropdown--trigger\",\n          triggerButtonClass && triggerButtonClass\n        )}\n      >\n        {triggerButton}\n        {!hideDownArrow && (\n          <svg\n            height=\"20\"\n            width=\"20\"\n            viewBox=\"0 0 20 20\"\n            aria-hidden=\"true\"\n            focusable=\"false\"\n            className={clsx(\"c4dropdown--icon\", isOpen && \"c4dropdown--open\")}\n          >\n            <path d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\"></path>\n          </svg>\n        )}\n      </button>\n      <div\n        className={clsx(\n          isOpen && \"c4dropdown--open\",\n          \"c4dropdown--listcontainer\"\n        )}\n      >\n        <div className={\"c4dropdown--list\"}>{children}</div>\n      </div>\n    </div>\n  );\n};\n\nDropdown.defaultProps = {\n  links: [],\n  wrapperClass: \"\",\n  triggerButtonClass: \"\",\n  triggerAriaLabel: \"See more options\",\n  openOnHover: true,\n  hideDownArrow: false,\n};\n\nexport default Dropdown;\n"],"names":[],"sourceRoot":""}