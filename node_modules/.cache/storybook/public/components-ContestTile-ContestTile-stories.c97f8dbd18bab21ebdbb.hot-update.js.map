{"version":3,"file":"components-ContestTile-ContestTile-stories.c97f8dbd18bab21ebdbb.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAKA;AACA;AACA;AAAA;AAEA;AAGA;AAEA;AACA;AAGA;AAlOA;AAoOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAhDA;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAEA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AAlDA","sources":["webpack://c4-ui/./src/components/ContestTile/ContestTile.tsx"],"sourcesContent":["import clsx from \"clsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport \"./ContestTile.scss\";\nimport ContestStatus from \"../ContestStatus/ContestStatus\";\nimport {\n  ContestSchedule,\n  ContestTileProps,\n  CountdownProps,\n  DropdownLink,\n  DropdownProps,\n} from \"./ContestTile.types\";\nimport { getDates } from \"../../utils/time\";\nimport { Status } from \"../ContestStatus/ContestStatus.types\";\nimport { formatDistanceToNow, isBefore } from \"date-fns\";\n\nconst ContestTile: React.FC<ContestTileProps> = ({\n  htmlId,\n  codeAccess,\n  isUserCertified,\n  contestId,\n  sponsorImage,\n  sponsorUrl,\n  contestUrl,\n  contestRepo,\n  findingsRepo,\n  title,\n  description,\n  amount,\n  status,\n  startDate,\n  endDate,\n  updateContestStatus,\n}) => {\n  const [canViewContest, setCanViewContest] = useState(false);\n  const [contestTimelineObject, setContestTimelineObject] =\n    useState<ContestSchedule>(getDates(startDate, endDate));\n  const [dropdownLinks, setDropdownLinks] = useState<DropdownLink[]>([]);\n  const [hasBotRace, setHasBotRace] = useState(false);\n\n  useEffect(() => {\n    setHasBotRace(codeAccess === \"public\" && contestId !== 252);\n  }, [codeAccess, contestId]);\n\n  useEffect(() => {\n    if (codeAccess === \"public\") {\n      setCanViewContest(true);\n    } else if (codeAccess === \"certified\" && isUserCertified) {\n      setCanViewContest(true);\n    } else {\n      setCanViewContest(false);\n    }\n  }, [codeAccess, isUserCertified]);\n\n  useEffect(() => {\n    const links: DropdownLink[] = [];\n    if (contestTimelineObject.contestStatus !== Status.LIVE) {\n      setDropdownLinks(links);\n      return;\n    }\n    if (contestRepo && canViewContest) {\n      links.push({\n        label: \"View Repo\",\n        href: contestRepo,\n        external: true,\n        ariaLabel: \"Go to audit competition repo (Opens in a new window)\",\n      });\n    }\n    if (hasBotRace && isBefore(new Date(), contestTimelineObject.botRaceEnd)) {\n      links.push({\n        label: \"Submit Bot Race report\",\n        href: `${contestUrl}/submit/bot`,\n      });\n    }\n    if (\n      findingsRepo &&\n      canViewContest &&\n      (!hasBotRace || contestTimelineObject.botRaceStatus === Status.ENDED)\n    ) {\n      links.push({\n        label: \"Submit finding\",\n        href: `${contestUrl}/submit`,\n      });\n    }\n    if (\n      findingsRepo &&\n      canViewContest &&\n      (!hasBotRace || contestTimelineObject.botRaceStatus === Status.ENDED)\n    ) {\n      links.push({\n        label: \"Submit Analysis report\",\n        href: `${contestUrl}/submit/analysis`,\n      });\n    }\n    setDropdownLinks(links);\n  }, [\n    hasBotRace,\n    contestTimelineObject,\n    canViewContest,\n    findingsRepo,\n    contestUrl,\n    contestId,\n    contestRepo,\n  ]);\n\n  useEffect(() => {\n    const newTimelineObject = getDates(startDate, endDate);\n    setContestTimelineObject(newTimelineObject);\n  }, [startDate, endDate]);\n\n  const updateContestTileStatus = useCallback(() => {\n    if (updateContestStatus) {\n      updateContestStatus();\n    }\n    const newTimelineObject = getDates(startDate, endDate);\n    setContestTimelineObject(newTimelineObject);\n  }, [startDate, endDate, updateContestStatus]);\n\n  return (\n    <div id={htmlId ?? undefined} className=\"c4contesttile\">\n      <div className=\"tile--body\">\n        <header>\n          {sponsorUrl ? (\n            <a\n              href={sponsorUrl}\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n              className=\"tile--body--logo\"\n            >\n              <img\n                alt=\"Sponsor logo\"\n                src={sponsorImage ?? \"/\"}\n                width={88}\n                height={88}\n              />\n            </a>\n          ) : (\n            <img\n              alt=\"Sponsor logo\"\n              className=\"tile--body--logo\"\n              src={sponsorImage ?? \"/\"}\n              width={88}\n              height={88}\n            />\n          )}\n          <div>\n            <small className=\"tile--body--period\">\n              {contestTimelineObject.formattedStart} -{\" \"}\n              {contestTimelineObject.formattedEnd}\n            </small>\n            <h2 className=\"tile--body--title\">\n              <a href={`${contestUrl}#top`}>{title}</a>\n            </h2>\n            <p className=\"tile--body--description\">\n              {description}{\" \"}\n              {hasBotRace &&\n                (contestTimelineObject.botRaceStatus === Status.UPCOMING ||\n                  contestTimelineObject.botRaceStatus === Status.LIVE) && (\n                  <span className=\"tile--body--botracestatus\">\n                    <img\n                      alt=\"Wolf bot\"\n                      src=\"/icons/wolfbot.svg\"\n                      height={16}\n                      width={16}\n                    />\n                    {contestTimelineObject.botRaceStatus === Status.UPCOMING &&\n                      \"1st hour: Bot Race\"}\n                    {contestTimelineObject.botRaceStatus === Status.LIVE &&\n                      \"Bot Race live\"}\n                  </span>\n                )}\n            </p>\n          </div>\n        </header>\n        <p className=\"tile--body--amount\">{amount}</p>\n      </div>\n      <footer className=\"tile--footer\">\n        <div className=\"tile--footer--details\">\n          <ContestStatus className=\"tile--footer--status\" status={status} />\n          <p className=\"tile--footer--timer\">\n            <Countdown\n              start={startDate}\n              end={endDate}\n              updateContestStatus={updateContestTileStatus}\n              text={\n                contestTimelineObject.contestStatus === Status.UPCOMING\n                  ? \"Starts in \"\n                  : \"Ends in \"\n              }\n            />\n          </p>\n        </div>\n        <a\n          className=\"tile--footer--contestredirect\"\n          aria-label=\"View competition\"\n          href={`${contestUrl}#`}\n        >\n          {!findingsRepo || findingsRepo === \"\" ? \"Preview\" : \"View\"}{\" \"}\n          competition\n        </a>\n        {dropdownLinks.length > 0 && (\n          <Dropdown\n            triggerButton={\n              <img\n                src=\"/icons/ellipsis.svg\"\n                alt=\"More options\"\n                width={32}\n                height={32}\n              />\n            }\n            triggerAriaLabel=\"See more contest options\"\n            hideDownArrow={true}\n            openOnHover={true}\n          >\n            {dropdownLinks.map((link) =>\n              link.external ? (\n                <a\n                  key={link.href}\n                  href={link.href}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  className=\"dropdown--button\"\n                  aria-label={link.ariaLabel ?? undefined}\n                >\n                  {link.label}\n                </a>\n              ) : (\n                <a\n                  key={link.href}\n                  href={link.href}\n                  className=\"dropdown--button\"\n                  aria-label={link.ariaLabel ?? undefined}\n                >\n                  {link.label}\n                </a>\n              )\n            )}\n          </Dropdown>\n        )}\n      </footer>\n    </div>\n  );\n};\n\nexport default ContestTile;\n\nfunction getCountdownTarget(schedule: ContestSchedule): Date {\n  if (schedule.contestStatus === Status.LIVE) {\n    return schedule.end;\n  }\n  return schedule.start;\n}\n\nconst Countdown = ({\n  start,\n  end,\n  text,\n  updateContestStatus,\n}: CountdownProps) => {\n  const [contestTimer, setContestTimer] = useState<ContestSchedule>();\n\n  const countDown = useCallback(() => {\n    const newTimer = getDates(start, end);\n    const target = getCountdownTarget(newTimer);\n    return formatDistanceToNow(target, { includeSeconds: true });\n  }, [start, end]);\n\n  const [formattedCountdown, setFormattedCountdown] = useState(countDown);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const newTimer = getDates(start, end);\n      if (\n        contestTimer &&\n        (contestTimer.contestStatus !== newTimer.contestStatus ||\n          contestTimer.botRaceStatus !== newTimer.botRaceStatus)\n      ) {\n        setContestTimer(newTimer);\n        if (updateContestStatus) {\n          updateContestStatus();\n        }\n      }\n      if (newTimer.contestStatus === Status.ENDED) {\n        clearInterval(timer);\n        return;\n      }\n      const target = getCountdownTarget(newTimer);\n\n      setFormattedCountdown(\n        formatDistanceToNow(target, { includeSeconds: true })\n      );\n    }, 10000); // only up to 10 sec precision\n    return () => clearInterval(timer);\n  }, [start, end, contestTimer, updateContestStatus]);\n\n  return (\n    <div className=\"countdown\">\n      {text && text}\n      <span>{formattedCountdown}</span>\n    </div>\n  );\n};\n\nconst Dropdown = ({\n  wrapperClass,\n  triggerButtonClass,\n  openOnHover,\n  triggerButton,\n  triggerAriaLabel,\n  hideDownArrow,\n  children,\n}: DropdownProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div\n      onMouseEnter={openOnHover ? () => setIsOpen(true) : undefined}\n      onMouseLeave={openOnHover ? () => setIsOpen(false) : undefined}\n      className={clsx(\"tile--footer--dropdown\", wrapperClass && wrapperClass)}\n    >\n      <button\n        aria-label={triggerAriaLabel ?? undefined}\n        onClick={() => setIsOpen(!isOpen)}\n        onTouchStart={() => setIsOpen(!isOpen)}\n        className={clsx(\n          \"tile--footer-dropdown--trigger\",\n          triggerButtonClass && triggerButtonClass\n        )}\n      >\n        {triggerButton}\n        {!hideDownArrow && (\n          <svg\n            height=\"20\"\n            width=\"20\"\n            viewBox=\"0 0 20 20\"\n            aria-hidden=\"true\"\n            focusable=\"false\"\n            className={clsx(\n              \"dropdown__dropdown-icon\",\n              isOpen && \"dropdown__open\"\n            )}\n          >\n            <path d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\"></path>\n          </svg>\n        )}\n      </button>\n      <div\n        className={clsx(isOpen && \"dropdown--open\", \"dropdown--listcontainer\")}\n      >\n        <div className={\"dropdown--list\"}>{children}</div>\n      </div>\n    </div>\n  );\n};\n"],"names":[],"sourceRoot":""}