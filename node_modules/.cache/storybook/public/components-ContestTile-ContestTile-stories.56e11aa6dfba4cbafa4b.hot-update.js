"use strict";
self["webpackHotUpdatec4_ui"]("components-ContestTile-ContestTile-stories",{

/***/ "./src/components/ContestTile/ContestTile.tsx":
/*!****************************************************!*\
  !*** ./src/components/ContestTile/ContestTile.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! clsx */ "./node_modules/clsx/dist/clsx.m.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ContestTile_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ContestTile.scss */ "./src/components/ContestTile/ContestTile.scss");
/* harmony import */ var _ContestStatus_ContestStatus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ContestStatus/ContestStatus */ "./src/components/ContestStatus/ContestStatus.tsx");
/* harmony import */ var _utils_time__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/time */ "./src/utils/time.ts");
/* harmony import */ var _ContestStatus_ContestStatus_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ContestStatus/ContestStatus.types */ "./src/components/ContestStatus/ContestStatus.types.ts");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/formatDistanceToNow/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/isBefore/index.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");








/**
 * Contest tile time tracker displayed right next to the contest status in the contest tile footer.
 *
 * @param start - Contest start date string value.
 * @param end - Contest end date string value.
 * @param text - Display text representing time until start of contest or remaining time before end of contest.
 * @param updateContestStatus - callback function to trigger any necessary updates based on timer changes.
 */


const Countdown = ({
  start,
  end,
  text,
  updateContestStatus
}) => {
  const [contestTimer, setContestTimer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const getCountdownTarget = schedule => {
    if (schedule.contestStatus === _ContestStatus_ContestStatus_types__WEBPACK_IMPORTED_MODULE_4__.Status.LIVE) {
      return schedule.end;
    }
    return schedule.start;
  };
  const countDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    const newTimer = (0,_utils_time__WEBPACK_IMPORTED_MODULE_3__.getDates)(start, end);
    const target = getCountdownTarget(newTimer);
    return (0,date_fns__WEBPACK_IMPORTED_MODULE_6__["default"])(target, {
      includeSeconds: true
    });
  }, [start, end]);
  const [formattedCountdown, setFormattedCountdown] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(countDown);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const timer = setInterval(() => {
      const newTimer = (0,_utils_time__WEBPACK_IMPORTED_MODULE_3__.getDates)(start, end);
      if (contestTimer && (contestTimer.contestStatus !== newTimer.contestStatus || contestTimer.botRaceStatus !== newTimer.botRaceStatus)) {
        setContestTimer(newTimer);
        if (updateContestStatus) {
          updateContestStatus();
        }
      }
      if (newTimer.contestStatus === _ContestStatus_ContestStatus_types__WEBPACK_IMPORTED_MODULE_4__.Status.ENDED) {
        clearInterval(timer);
        return;
      }
      const target = getCountdownTarget(newTimer);
      setFormattedCountdown((0,date_fns__WEBPACK_IMPORTED_MODULE_6__["default"])(target, {
        includeSeconds: true
      }));
    }, 10000); // only up to 10 sec precision
    return () => clearInterval(timer);
  }, [start, end, contestTimer, updateContestStatus]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("div", {
    className: "countdown",
    children: [text && text, /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("span", {
      children: formattedCountdown
    })]
  });
};
Countdown.displayName = "Countdown";
/**
 * Dropdown component to display additional options `onHover` of the button generated from the `triggerButton` prop.
 *
 * @param wrapperClass - Additional classes for the dropdown's wrapping div element.
 * @param triggerButtonClass - Additional classes for the dropdown's triggering button.
 * @param openOnHover - Boolean indicating whether or not hovering the trigger button will display the dropdown.
 * @param triggerButton - Children to be wrapped by a `button` element.
 * @param triggerAriaLabel - Accessibility label for the dropdown's trigger button.
 * @param hideDownArrow - Boolean indicating whether or not an arrow indicator should be displayed on the trigger button.
 * @param children - Children to be displayed inside the dropdown.
 */
const Dropdown = ({
  wrapperClass,
  triggerButtonClass,
  openOnHover,
  triggerButton,
  triggerAriaLabel,
  hideDownArrow,
  children
}) => {
  const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("div", {
    onMouseEnter: openOnHover ? () => setIsOpen(true) : undefined,
    onMouseLeave: openOnHover ? () => setIsOpen(false) : undefined,
    className: (0,clsx__WEBPACK_IMPORTED_MODULE_7__["default"])("tile--footer--dropdown", wrapperClass && wrapperClass),
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("button", {
      "aria-label": triggerAriaLabel ?? undefined,
      onClick: () => setIsOpen(!isOpen),
      onTouchStart: () => setIsOpen(!isOpen),
      className: (0,clsx__WEBPACK_IMPORTED_MODULE_7__["default"])("tile--footer--dropdown--trigger", triggerButtonClass && triggerButtonClass),
      children: [triggerButton, !hideDownArrow && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("svg", {
        height: "20",
        width: "20",
        viewBox: "0 0 20 20",
        "aria-hidden": "true",
        focusable: "false",
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_7__["default"])("dropdown--icon", isOpen && "dropdown--open"),
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("path", {
          d: "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
        })
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("div", {
      className: (0,clsx__WEBPACK_IMPORTED_MODULE_7__["default"])(isOpen && "dropdown--open", "dropdown--listcontainer"),
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("div", {
        className: "dropdown--list",
        children: children
      })
    })]
  });
};
Dropdown.displayName = "Dropdown";
const ContestTile = ({
  htmlId,
  codeAccess,
  isUserCertified,
  contestId,
  sponsorImage,
  sponsorUrl,
  contestUrl,
  contestRepo,
  findingsRepo,
  title,
  description,
  amount,
  status,
  startDate,
  endDate,
  updateContestStatus
}) => {
  const [canViewContest, setCanViewContest] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [contestTimelineObject, setContestTimelineObject] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((0,_utils_time__WEBPACK_IMPORTED_MODULE_3__.getDates)(startDate, endDate));
  const [dropdownLinks, setDropdownLinks] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [hasBotRace, setHasBotRace] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    setHasBotRace(codeAccess === "public" && contestId !== 252);
  }, [codeAccess, contestId]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (codeAccess === "public") {
      setCanViewContest(true);
    } else if (codeAccess === "certified" && isUserCertified) {
      setCanViewContest(true);
    } else {
      setCanViewContest(false);
    }
  }, [codeAccess, isUserCertified]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const links = [];
    if (contestTimelineObject.contestStatus !== _ContestStatus_ContestStatus_types__WEBPACK_IMPORTED_MODULE_4__.Status.LIVE) {
      setDropdownLinks(links);
      return;
    }
    if (contestRepo && canViewContest) {
      links.push({
        label: "View Repo",
        href: contestRepo,
        external: true,
        ariaLabel: "Go to audit competition repo (Opens in a new window)"
      });
    }
    if (hasBotRace && (0,date_fns__WEBPACK_IMPORTED_MODULE_8__["default"])(new Date(), contestTimelineObject.botRaceEnd)) {
      links.push({
        label: "Submit Bot Race report",
        href: `${contestUrl}/submit/bot`
      });
    }
    if (findingsRepo && canViewContest && (!hasBotRace || contestTimelineObject.botRaceStatus === _ContestStatus_ContestStatus_types__WEBPACK_IMPORTED_MODULE_4__.Status.ENDED)) {
      links.push({
        label: "Submit finding",
        href: `${contestUrl}/submit`
      });
    }
    if (findingsRepo && canViewContest && (!hasBotRace || contestTimelineObject.botRaceStatus === _ContestStatus_ContestStatus_types__WEBPACK_IMPORTED_MODULE_4__.Status.ENDED)) {
      links.push({
        label: "Submit Analysis report",
        href: `${contestUrl}/submit/analysis`
      });
    }
    setDropdownLinks(links);
  }, [hasBotRace, contestTimelineObject, canViewContest, findingsRepo, contestUrl, contestId, contestRepo]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const newTimelineObject = (0,_utils_time__WEBPACK_IMPORTED_MODULE_3__.getDates)(startDate, endDate);
    setContestTimelineObject(newTimelineObject);
  }, [startDate, endDate]);
  const updateContestTileStatus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (updateContestStatus) {
      updateContestStatus();
    }
    const newTimelineObject = (0,_utils_time__WEBPACK_IMPORTED_MODULE_3__.getDates)(startDate, endDate);
    setContestTimelineObject(newTimelineObject);
  }, [startDate, endDate, updateContestStatus]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("div", {
    id: htmlId ?? undefined,
    className: "c4contesttile",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("div", {
      className: "tile--body",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("header", {
        children: [sponsorUrl ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("a", {
          href: sponsorUrl,
          target: "_blank",
          rel: "noreferrer noopener",
          className: "tile--body--logo",
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("img", {
            alt: "Sponsor logo",
            src: sponsorImage ?? "/",
            width: 88,
            height: 88
          })
        }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("img", {
          alt: "Sponsor logo",
          className: "tile--body--logo",
          src: sponsorImage ?? "/",
          width: 88,
          height: 88
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("div", {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("small", {
            className: "tile--body--period",
            children: [contestTimelineObject.formattedStart, " -", " ", contestTimelineObject.formattedEnd]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("h2", {
            className: "tile--body--title",
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("a", {
              href: `${contestUrl}#top`,
              children: title
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("p", {
            className: "tile--body--description",
            children: [description, " ", hasBotRace && (contestTimelineObject.botRaceStatus === _ContestStatus_ContestStatus_types__WEBPACK_IMPORTED_MODULE_4__.Status.UPCOMING || contestTimelineObject.botRaceStatus === _ContestStatus_ContestStatus_types__WEBPACK_IMPORTED_MODULE_4__.Status.LIVE) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("span", {
              className: "tile--body--botracestatus",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("img", {
                alt: "Wolf bot",
                src: "/icons/wolfbot.svg",
                height: 16,
                width: 16
              }), contestTimelineObject.botRaceStatus === _ContestStatus_ContestStatus_types__WEBPACK_IMPORTED_MODULE_4__.Status.UPCOMING && "1st hour: Bot Race", contestTimelineObject.botRaceStatus === _ContestStatus_ContestStatus_types__WEBPACK_IMPORTED_MODULE_4__.Status.LIVE && "Bot Race live"]
            })]
          })]
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("p", {
        className: "tile--body--amount",
        children: amount
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("footer", {
      className: "tile--footer",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("div", {
        className: "tile--footer--details",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_ContestStatus_ContestStatus__WEBPACK_IMPORTED_MODULE_2__["default"], {
          className: "tile--footer--status",
          status: status
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("p", {
          className: "tile--footer--timer",
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Countdown, {
            start: startDate,
            end: endDate,
            updateContestStatus: updateContestTileStatus,
            text: contestTimelineObject.contestStatus === _ContestStatus_ContestStatus_types__WEBPACK_IMPORTED_MODULE_4__.Status.UPCOMING ? "Starts in " : "Ends in "
          })
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("a", {
        className: "tile--footer--contestredirect",
        "aria-label": "View competition",
        href: `${contestUrl}#`,
        children: [!findingsRepo || findingsRepo === "" ? "Preview" : "View", " ", "competition"]
      }), dropdownLinks.length > 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Dropdown, {
        triggerButton: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("img", {
          src: "/icons/ellipsis.svg",
          alt: "More options",
          width: 32,
          height: 32
        }),
        triggerAriaLabel: "See more contest options",
        hideDownArrow: false,
        openOnHover: true,
        children: dropdownLinks.map(link => link.external ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("a", {
          href: link.href,
          target: "_blank",
          rel: "noreferrer",
          className: "dropdown--button",
          "aria-label": link.ariaLabel ?? undefined,
          children: link.label
        }, link.href) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("a", {
          href: link.href,
          className: "dropdown--button",
          "aria-label": link.ariaLabel ?? undefined,
          children: link.label
        }, link.href))
      })]
    })]
  });
};
ContestTile.displayName = "ContestTile";
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ContestTile);
try {
    // @ts-ignore
    ContestTile.displayName = "ContestTile";
    // @ts-ignore
    ContestTile.__docgenInfo = { "description": "", "displayName": "ContestTile", "props": { "htmlId": { "defaultValue": null, "description": "", "name": "htmlId", "required": false, "type": { "name": "string" } }, "codeAccess": { "defaultValue": null, "description": "", "name": "codeAccess", "required": true, "type": { "name": "string" } }, "isUserCertified": { "defaultValue": null, "description": "", "name": "isUserCertified", "required": true, "type": { "name": "boolean" } }, "contestId": { "defaultValue": null, "description": "", "name": "contestId", "required": true, "type": { "name": "number" } }, "sponsorImage": { "defaultValue": null, "description": "", "name": "sponsorImage", "required": false, "type": { "name": "string" } }, "sponsorUrl": { "defaultValue": null, "description": "", "name": "sponsorUrl", "required": false, "type": { "name": "string" } }, "contestUrl": { "defaultValue": null, "description": "", "name": "contestUrl", "required": true, "type": { "name": "string" } }, "contestRepo": { "defaultValue": null, "description": "", "name": "contestRepo", "required": true, "type": { "name": "string" } }, "findingsRepo": { "defaultValue": null, "description": "", "name": "findingsRepo", "required": true, "type": { "name": "string" } }, "title": { "defaultValue": null, "description": "", "name": "title", "required": true, "type": { "name": "string" } }, "description": { "defaultValue": null, "description": "", "name": "description", "required": true, "type": { "name": "string" } }, "amount": { "defaultValue": null, "description": "", "name": "amount", "required": true, "type": { "name": "string" } }, "status": { "defaultValue": null, "description": "", "name": "status", "required": true, "type": { "name": "enum", "value": [{ "value": "\"UPCOMING\"" }, { "value": "\"LIVE\"" }, { "value": "\"ENDED\"" }] } }, "startDate": { "defaultValue": null, "description": "", "name": "startDate", "required": true, "type": { "name": "string" } }, "endDate": { "defaultValue": null, "description": "", "name": "endDate", "required": true, "type": { "name": "string" } }, "updateContestStatus": { "defaultValue": null, "description": "", "name": "updateContestStatus", "required": true, "type": { "name": "(() => void) | undefined" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/components/ContestTile/ContestTile.tsx#ContestTile"] = { docgenInfo: ContestTile.__docgenInfo, name: "ContestTile", path: "src/components/ContestTile/ContestTile.tsx#ContestTile" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ })

});
//# sourceMappingURL=components-ContestTile-ContestTile-stories.56e11aa6dfba4cbafa4b.hot-update.js.map