{"version":3,"file":"components-NavBar-NavBar-stories.dea9a0fc454e8b43a09b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAxBA;AA0BA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://c4-ui/./src/components/NavBar/NavBar.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport Dropdown from \"../Dropdown/Dropdown\";\nimport Avatar from \"react-avatar\";\nimport { ModalProps, NavBarProps, Web3ProviderType } from \"./NavBar.types\";\nimport \"./NavBar.scss\";\n\nconst UserDropdown = ({\n  userImage,\n  username,\n  logoutHandler,\n}: {\n  userImage?: string;\n  username?: string;\n  logoutHandler: () => void;\n}) => {\n  const avatar = () => (\n    <div className=\"nav--dropdown--user--avatar\">\n      <Avatar src={userImage} name={username} size=\"30px\" round={true} />\n    </div>\n  );\n\n  return (\n    <Dropdown\n      wrapperClass=\"nav--dropdown--user\"\n      triggerButtonClass=\"nav--dropdown--user--trigger\"\n      triggerButton={avatar()}\n      openOnHover={true}\n      hideDownArrow={true}\n    />\n  );\n};\n\nconst Login = ({\n  modalHandler,\n  loginHandler,\n}: {\n  modalHandler: (modalProps: ModalProps) => void;\n  loginHandler: (event: React.MouseEvent, provider?: Web3ProviderType) => void;\n}) => {\n  const openLoginModal = (e: React.MouseEvent) => {\n    e.preventDefault();\n    modalHandler({ title: \"Log in\", body: \"\", type: \"login\" });\n  };\n\n  const children = (\n    <>\n      <button\n        type=\"button\"\n        aria-label=\"Login with MetaMask\"\n        onClick={(e) => loginHandler(e, \"metamask\")}\n        className=\"c4dropdown--button\"\n      >\n        <img\n          src=\"/logos/meta-mask-logo.svg\"\n          alt=\"logout icon\"\n          className={\"login__icon\"}\n          width={20}\n          height={20}\n        />\n        MetaMask\n      </button>\n      <button\n        type=\"button\"\n        aria-label=\"Login with WalletConnect\"\n        onClick={(e) => loginHandler(e, \"walletConnect\")}\n        className=\"c4dropdown--button\"\n      >\n        <img\n          src=\"/logos/wallet-connect-logo.svg\"\n          alt=\"logout icon\"\n          className={\"login__icon\"}\n          width={20}\n          height={20}\n        />\n        WalletConnect\n      </button>\n      <button\n        className=\"c4dropdown--button\"\n        aria-label=\"Email login\"\n        type=\"button\"\n        onClick={openLoginModal}\n      >\n        <img\n          src=\"/icons/sign-out.svg\"\n          alt=\"login icon\"\n          width={20}\n          height={20}\n        />\n        Log in\n      </button>\n      <a\n        aria-label=\"Create an account\"\n        href=\"/register\"\n        className=\"c4dropdown--button\"\n      >\n        <img\n          src=\"/icons/register.svg\"\n          alt=\"login icon\"\n          width={20}\n          height={20}\n        />\n        Register\n      </a>\n    </>\n  );\n\n  return (\n    <>\n      {/* Desktop View */}\n      <Dropdown\n        wrapperClass=\"nav--dropdown--login\"\n        triggerButtonClass=\"nav--dropdown--login--trigger\"\n        triggerButton=\"Connect\"\n        hideDownArrow={false}\n        openOnHover={true}\n      >\n        {children}\n      </Dropdown>\n      {/* Mobile view */}\n      <div className=\"nav--login--mobile\">{children}</div>\n    </>\n  );\n};\n\nconst NavBar: React.FC<NavBarProps> = ({\n  isLoggedIn,\n  userImage,\n  username,\n  hideConnectWalletDropdown,\n  logoutHandler,\n  loginHandler,\n  modalHandler,\n  navLinks,\n}) => {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n\n  const hideMobileNav = () => {\n    setMobileNavOpen(false);\n  };\n\n  return (\n    <>\n      <header>\n        <a className=\"visually-hidden focusable\" href=\"#skip-to-main\">\n          Skip navigation\n        </a>\n        <nav role=\"navigation\" className={clsx(mobileNavOpen && \"open\")}>\n          <a className=\"logo\" href=\"/\">\n            <img\n              style={{\n                objectFit: \"cover\",\n                minWidth: \"143px\",\n                minHeight: \"28px\",\n              }}\n              alt=\"Code4rena Logo\"\n              src=\"/logos/c4-logo.svg\"\n              width={143}\n              height={28}\n              loading=\"lazy\"\n            />\n          </a>\n          <button\n            className=\"menu--hamburger\"\n            onClick={() => setMobileNavOpen((isOpen: boolean) => !isOpen)}\n            aria-label={mobileNavOpen ? \"Close menu\" : \"Open menu\"}\n            aria-expanded={mobileNavOpen}\n          >\n            <svg\n              height=\"22\"\n              viewBox=\"0 0 22 22\"\n              width=\"22\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <g fill=\"#d8d8d8\" fillRule=\"evenodd\">\n                <rect className=\"top-bun\" height=\"2\" rx=\"1.5\" width=\"22\" />\n                <rect className=\"patty\" height=\"2\" rx=\"1.5\" width=\"22\" y=\"9\" />\n                <rect\n                  className=\"bottom-bun\"\n                  height=\"2\"\n                  rx=\"1.5\"\n                  width=\"22\"\n                  y=\"18\"\n                />\n              </g>\n            </svg>\n          </button>\n          <div className=\"nav--links\">\n            {navLinks?.map((link) => {\n              return (\n                <a\n                  key={`nav_link_${link.label}`}\n                  href={link.href}\n                  target={link.external ? \"_blank\" : undefined}\n                  rel={link.external ? \"noreferrer noopener\" : undefined}\n                >\n                  {link.label}\n                </a>\n              );\n            })}\n            <div className=\"nav--buttons\">\n              {/* <Login loginHandler={loginHandler} modalHandler={modalHandler} /> */}\n              <UserDropdown\n                userImage={userImage}\n                username={username}\n                logoutHandler={logoutHandler}\n              />\n              {/* {!hideConnectWalletDropdown &&\n                (isLoggedIn ? <UserDropdown /> : <Login />)} */}\n            </div>\n          </div>\n        </nav>\n      </header>\n      <span id=\"skip-to-main\" />\n    </>\n  );\n};\n\nNavBar.defaultProps = {\n  hideConnectWalletDropdown: false,\n  navLinks: [],\n};\nexport default NavBar;\n"],"names":[],"sourceRoot":""}