{"version":3,"file":"components-ContestTile-ContestTile-stories.7eea9e427d37022a4635.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://c4-ui/./src/utils/time.ts"],"sourcesContent":["import { addHours, format, formatDistance, isAfter, isBefore } from \"date-fns\";\nimport { ContestSchedule } from \"../components/ContestTile/ContestTile.types\";\nimport { Status } from \"../components/ContestStatus/ContestStatus.types\";\nimport { DateTime } from \"luxon\";\n\nfunction getContestStatuses(\n  start: Date,\n  end: Date,\n  botRaceEnd: Date\n): { botRaceStatus?: Status; contestStatus?: Status } {\n  const currentTime = new Date();\n  if (isBefore(currentTime, start)) {\n    return {\n      botRaceStatus: Status.UPCOMING,\n      contestStatus: Status.UPCOMING,\n    };\n  }\n  if (isBefore(currentTime, botRaceEnd) && isAfter(currentTime, start)) {\n    return {\n      botRaceStatus: Status.LIVE,\n      contestStatus: Status.LIVE,\n    };\n  }\n\n  if (isAfter(currentTime, botRaceEnd) && isBefore(currentTime, end)) {\n    return {\n      botRaceStatus: Status.ENDED,\n      contestStatus: Status.LIVE,\n    };\n  }\n  if (isAfter(currentTime, end)) {\n    return {\n      botRaceStatus: Status.ENDED,\n      contestStatus: Status.ENDED,\n    };\n  }\n  return {\n    botRaceStatus: undefined,\n    contestStatus: undefined,\n  };\n}\n\nconst getDates = (start: string, end: string): ContestSchedule => {\n  const startDate = new Date(start);\n  const endDate = new Date(end);\n  const timeZone = DateTime.local().toFormat(\"ZZZZ\");\n\n  const botRaceEnd = addHours(new Date(startDate), 1);\n  const { contestStatus, botRaceStatus } = getContestStatuses(\n    startDate,\n    endDate,\n    botRaceEnd\n  );\n\n  return {\n    contestStatus,\n    botRaceStatus,\n    start: startDate,\n    end: endDate,\n    botRaceEnd,\n    formattedEnd: format(endDate, \"d MMM h:mm a\"),\n    formattedStart: format(startDate, \"d MMM h:mm a\"),\n    timeZone: timeZone,\n    formattedBotRaceEnd: format(botRaceEnd, \"d MMMM h:mm a\"),\n    formattedDuration: formatDistance(startDate, endDate),\n  };\n};\n\nexport { getDates };\n"],"names":[],"sourceRoot":""}