{"version":3,"file":"components-ContestTile-ContestTile-stories.2005b5062b8521a23ded.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAOA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAhMA;AAkMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAhDA","sources":["webpack://c4-ui/./src/components/ContestTile/ContestTile.tsx"],"sourcesContent":["import clsx from \"clsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport \"./ContestTile.scss\";\nimport ContestStatus from \"../ContestStatus/ContestStatus\";\nimport {\n  ContestSchedule,\n  ContestTileProps,\n  CountdownProps,\n  DropdownLink,\n} from \"./ContestTile.types\";\nimport { getDates } from \"../../utils/time\";\nimport { Status } from \"../ContestStatus/ContestStatus.types\";\nimport { formatDistanceToNow, isBefore } from \"date-fns\";\n\nconst ContestTile: React.FC<ContestTileProps> = ({\n  htmlId,\n  codeAccess,\n  isUserCertified,\n  contestId,\n  sponsorImage,\n  sponsorUrl,\n  contestUrl,\n  contestRepo,\n  findingsRepo,\n  title,\n  description,\n  amount,\n  status,\n  startDate,\n  endDate,\n  updateContestStatus,\n}) => {\n  const [canViewContest, setCanViewContest] = useState(false);\n  const [contestTimelineObject, setContestTimelineObject] =\n    useState<ContestSchedule>(getDates(startDate, endDate));\n  const [dropdownLinks, setDropdownLinks] = useState<DropdownLink[]>([]);\n  const [hasBotRace, setHasBotRace] = useState(false);\n\n  useEffect(() => {\n    setHasBotRace(codeAccess === \"public\" && contestId !== 252);\n  }, [codeAccess, contestId]);\n\n  useEffect(() => {\n    if (codeAccess === \"public\") {\n      setCanViewContest(true);\n    } else if (codeAccess === \"certified\" && isUserCertified) {\n      setCanViewContest(true);\n    } else {\n      setCanViewContest(false);\n    }\n  }, [codeAccess, isUserCertified]);\n\n  useEffect(() => {\n    const links: DropdownLink[] = [];\n    if (contestTimelineObject.contestStatus !== Status.LIVE) {\n      setDropdownLinks(links);\n      return;\n    }\n    if (contestRepo && canViewContest) {\n      links.push({ label: \"View Repo â†—\", href: contestRepo, external: true });\n    }\n    if (hasBotRace && isBefore(new Date(), contestTimelineObject.botRaceEnd)) {\n      links.push({\n        label: \"Submit Bot Race report\",\n        href: `${contestUrl}/submit/bot`,\n      });\n    }\n    if (\n      findingsRepo &&\n      canViewContest &&\n      (!hasBotRace || contestTimelineObject.botRaceStatus === Status.ENDED)\n    ) {\n      links.push({\n        label: \"Submit finding\",\n        href: `${contestUrl}/submit`,\n      });\n    }\n    if (\n      findingsRepo &&\n      canViewContest &&\n      (!hasBotRace || contestTimelineObject.botRaceStatus === Status.ENDED)\n    ) {\n      links.push({\n        label: \"Submit Analysis report\",\n        href: `${contestUrl}/submit/analysis`,\n      });\n    }\n    setDropdownLinks(links);\n  }, [\n    hasBotRace,\n    contestTimelineObject,\n    canViewContest,\n    findingsRepo,\n    contestUrl,\n    contestId,\n    contestRepo,\n  ]);\n\n  useEffect(() => {\n    const newTimelineObject = getDates(startDate, endDate);\n    setContestTimelineObject(newTimelineObject);\n  }, [startDate, endDate]);\n\n  const updateContestTileStatus = useCallback(() => {\n    if (updateContestStatus) {\n      updateContestStatus();\n    }\n    const newTimelineObject = getDates(startDate, endDate);\n    setContestTimelineObject(newTimelineObject);\n  }, [startDate, endDate, updateContestStatus]);\n\n  return (\n    <div id={htmlId ?? undefined} className=\"c4contesttile\">\n      <div className=\"tile--body\">\n        <header>\n          {sponsorUrl ? (\n            <a\n              href={sponsorUrl}\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n              className=\"tile--body--logo\"\n            >\n              <img\n                alt=\"Sponsor logo\"\n                src={sponsorImage ?? \"/\"}\n                width={88}\n                height={88}\n              />\n            </a>\n          ) : (\n            <img\n              alt=\"Sponsor logo\"\n              className=\"tile--body--logo\"\n              src={sponsorImage ?? \"/\"}\n              width={88}\n              height={88}\n            />\n          )}\n          <div>\n            <small className=\"tile--body--period\">\n              {contestTimelineObject.formattedStart} -{\" \"}\n              {contestTimelineObject.formattedEnd}\n            </small>\n            <h2 className=\"tile--body--title\">\n              <a href={`${contestUrl}#top`}>{title}</a>\n            </h2>\n            <p className=\"tile--body--description\">\n              {description}{\" \"}\n              {hasBotRace &&\n                (contestTimelineObject.botRaceStatus === Status.UPCOMING ||\n                  contestTimelineObject.botRaceStatus === Status.LIVE) && (\n                  <span className=\"tile--body--botracestatus\">\n                    <img\n                      alt=\"Wolf bot\"\n                      src=\"/icons/wolfbot.svg\"\n                      height={16}\n                      width={16}\n                    />\n                    {contestTimelineObject.botRaceStatus === Status.UPCOMING &&\n                      \"1st hour: Bot Race\"}\n                    {contestTimelineObject.botRaceStatus === Status.LIVE &&\n                      \"Bot Race live\"}\n                  </span>\n                )}\n            </p>\n          </div>\n        </header>\n        <p className=\"tile--body--amount\">{amount}</p>\n      </div>\n      <footer className=\"tile--footer\">\n        <div className=\"tile--footer--details\">\n          <ContestStatus className=\"tile--footer--status\" status={status} />\n          <p className=\"tile--footer--timer\">\n            <Countdown\n              start={startDate}\n              end={endDate}\n              updateContestStatus={updateContestTileStatus}\n              text={\n                contestTimelineObject.contestStatus === Status.UPCOMING\n                  ? \"Starts in \"\n                  : \"Ends in \"\n              }\n            />\n          </p>\n        </div>\n        <a\n          className=\"tile--footer--contestredirect\"\n          aria-label=\"View competition\"\n          href={`${contestUrl}#`}\n        >\n          {!findingsRepo || findingsRepo === \"\" ? \"Preview\" : \"View\"}{\" \"}\n          competition\n        </a>\n        <div className=\"tile--footer--dropdown\">\n          <button aria-label=\"See more contest options\">\n            <img\n              src=\"/icons/ellipsis.svg\"\n              alt=\"More options\"\n              width={32}\n              height={32}\n            />\n          </button>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default ContestTile;\n\nfunction getCountdownTarget(schedule: ContestSchedule): Date {\n  if (schedule.contestStatus === Status.LIVE) {\n    return schedule.end;\n  }\n  return schedule.start;\n}\n\nconst Countdown = ({\n  start,\n  end,\n  text,\n  updateContestStatus,\n}: CountdownProps) => {\n  const [contestTimer, setContestTimer] = useState<ContestSchedule>();\n\n  const countDown = useCallback(() => {\n    const newTimer = getDates(start, end);\n    const target = getCountdownTarget(newTimer);\n    return formatDistanceToNow(target, { includeSeconds: true });\n  }, [start, end]);\n\n  const [formattedCountdown, setFormattedCountdown] = useState(countDown);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const newTimer = getDates(start, end);\n      if (\n        contestTimer &&\n        (contestTimer.contestStatus !== newTimer.contestStatus ||\n          contestTimer.botRaceStatus !== newTimer.botRaceStatus)\n      ) {\n        setContestTimer(newTimer);\n        if (updateContestStatus) {\n          updateContestStatus();\n        }\n      }\n      if (newTimer.contestStatus === Status.ENDED) {\n        clearInterval(timer);\n        return;\n      }\n      const target = getCountdownTarget(newTimer);\n\n      setFormattedCountdown(\n        formatDistanceToNow(target, { includeSeconds: true })\n      );\n    }, 10000); // only up to 10 sec precision\n    return () => clearInterval(timer);\n  }, [start, end, contestTimer, updateContestStatus]);\n\n  return (\n    <div className=\"countdown\">\n      {text && text}\n      <span>{formattedCountdown}</span>\n    </div>\n  );\n};\n"],"names":[],"sourceRoot":""}