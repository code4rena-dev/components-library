{"version":3,"file":"components-Button-Button-stories.53f23c41026e7ec6d6ec.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://c4-ui/./src/components/Button/Button.tsx"],"sourcesContent":["import React from \"react\";\nimport clsx from \"clsx\";\nimport { ButtonProps, Variant } from \"./Button.types\";\nimport \"./Button.scss\";\n\n/**\n * A stylized Code4rena button that can be rendered in 2 forms with multiple variants.\n * This component will either render as a **button tag** or an **anchor tag** depending on whether or not the `href` prop is provided.\n *\n * @param label - Label to be attached to the button.\n * @param type - HTML button element type.\n * @param variant - Style variant to be applied to rendered component. @type {Variant}\n */\nconst Button: React.FC<ButtonProps> = ({\n  label,\n  type,\n  variant,\n  external,\n  disabled,\n  iconLeft,\n  iconRight,\n  href,\n  onClick,\n}) => {\n  const styling = clsx({\n    button: true,\n    \"button--primary\": variant === Variant.PRIMARY,\n    \"button--secondary\": variant === Variant.SECONDARY,\n    \"button--primary button--primary--white\": variant === Variant.WHITE_PRIMARY,\n    \"button--secondary button--secondary--white\":\n      variant === Variant.WHITE_SECONDARY,\n    \"button--danger\": variant === Variant.DANGER,\n  });\n\n  return href != null && href.length ? (\n    <a\n      target={external ? \"_blank\" : undefined}\n      rel={external ? \"noreferrer noopener\" : undefined}\n      href={href}\n      className={styling}\n    >\n      {/* If passing a relative/absolute path as icon */}\n      {iconLeft && <img src={iconLeft} alt=\"\" />}\n      {label}\n      {/* If passing a relative/absolute path as icon */}\n      {iconRight && <img src={iconRight} alt=\"\" />}\n    </a>\n  ) : (\n    <button\n      type={type ?? \"button\"}\n      className={styling}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {/* If passing a relative/absolute path as icon */}\n      {iconLeft && <img src={iconLeft} alt=\"\" />}\n\n      {label}\n      {/* If passing a relative/absolute path as icon */}\n      {iconRight && <img src={iconRight} alt=\"\" />}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  label: \"Button\",\n  /* @ts-ignore value in Enum */\n  type: \"button\",\n  /* @ts-ignore value in Enum */\n  variant: \"PRIMARY\",\n  disabled: false,\n  iconLeft: \"\",\n  iconRight: \"\",\n  href: \"\",\n  external: false,\n  onClick: () => null,\n};\n\nexport default Button;\n"],"names":[],"sourceRoot":""}