{"version":3,"file":"components-ContestTile-ContestTile-stories.87c3b69a7edd80f0de2a.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAhLA;AAkLA","sources":["webpack://c4-ui/./src/components/ContestTile/ContestTile.tsx"],"sourcesContent":["import clsx from \"clsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport \"./ContestTile.scss\";\nimport ContestStatus from \"../ContestStatus/ContestStatus\";\nimport {\n  ContestSchedule,\n  ContestTileProps,\n  DropdownLink,\n} from \"./ContestTile.types\";\nimport { getDates } from \"../../utils/time\";\nimport { Status } from \"../ContestStatus/ContestStatus.types\";\nimport { isBefore } from \"date-fns\";\n\nconst ContestTile: React.FC<ContestTileProps> = ({\n  htmlId,\n  codeAccess,\n  isUserCertified,\n  contestId,\n  sponsorImage,\n  sponsorUrl,\n  contestUrl,\n  contestRepo,\n  findingsRepo,\n  title,\n  description,\n  amount,\n  status,\n  startDate,\n  endDate,\n  updateContestStatus,\n}) => {\n  const [canViewContest, setCanViewContest] = useState(false);\n  const [contestTimelineObject, setContestTimelineObject] =\n    useState<ContestSchedule>(getDates(startDate, endDate));\n  const [dropdownLinks, setDropdownLinks] = useState<DropdownLink[]>([]);\n  const [hasBotRace, setHasBotRace] = useState(false);\n\n  useEffect(() => {\n    setHasBotRace(codeAccess === \"public\" && contestId !== 252);\n  }, [codeAccess, contestId]);\n\n  useEffect(() => {\n    if (codeAccess === \"public\") {\n      setCanViewContest(true);\n    } else if (codeAccess === \"certified\" && isUserCertified) {\n      setCanViewContest(true);\n    } else {\n      setCanViewContest(false);\n    }\n  }, [codeAccess, isUserCertified]);\n\n  useEffect(() => {\n    const links: DropdownLink[] = [];\n    if (contestTimelineObject.contestStatus !== Status.LIVE) {\n      setDropdownLinks(links);\n      return;\n    }\n    if (contestRepo && canViewContest) {\n      links.push({ label: \"View Repo â†—\", href: contestRepo, external: true });\n    }\n    if (hasBotRace && isBefore(new Date(), contestTimelineObject.botRaceEnd)) {\n      links.push({\n        label: \"Submit Bot Race report\",\n        href: `${contestUrl}/submit/bot`,\n      });\n    }\n    if (\n      findingsRepo &&\n      canViewContest &&\n      (!hasBotRace || contestTimelineObject.botRaceStatus === Status.ENDED)\n    ) {\n      links.push({\n        label: \"Submit finding\",\n        href: `${contestUrl}/submit`,\n      });\n    }\n    if (\n      findingsRepo &&\n      canViewContest &&\n      (!hasBotRace || contestTimelineObject.botRaceStatus === Status.ENDED)\n    ) {\n      links.push({\n        label: \"Submit Analysis report\",\n        href: `${contestUrl}/submit/analysis`,\n      });\n    }\n    setDropdownLinks(links);\n  }, [\n    hasBotRace,\n    contestTimelineObject,\n    canViewContest,\n    findingsRepo,\n    contestUrl,\n    contestId,\n    contestRepo,\n  ]);\n\n  const updateContestTileStatus = useCallback(() => {\n    if (updateContestStatus) {\n      updateContestStatus();\n    }\n    const newTimelineObject = getDates(startDate, endDate);\n    setContestTimelineObject(newTimelineObject);\n  }, [startDate, endDate, updateContestStatus]);\n\n  return (\n    <div id={htmlId ?? undefined} className=\"c4contesttile\">\n      <div className=\"tile--body\">\n        <header>\n          {sponsorUrl ? (\n            <a\n              href={sponsorUrl}\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n              className=\"tile--body--logo\"\n            >\n              <img\n                alt=\"Sponsor logo\"\n                src={sponsorImage ?? \"/\"}\n                width={88}\n                height={88}\n              />\n            </a>\n          ) : (\n            <img\n              alt=\"Sponsor logo\"\n              className=\"tile--body--logo\"\n              src={sponsorImage ?? \"/\"}\n              width={88}\n              height={88}\n            />\n          )}\n          <div>\n            <small className=\"tile--body--period\">\n              {contestTimelineObject.formattedStart} -{\" \"}\n              {contestTimelineObject.formattedEnd}\n            </small>\n            <h2 className=\"tile--body--title\">\n              <a href={`${contestUrl}#top`}>{title}</a>\n            </h2>\n            <p className=\"tile--body--description\">\n              {description}\n              {hasBotRace &&\n                (contestTimelineObject.botRaceStatus === Status.UPCOMING ||\n                  contestTimelineObject.botRaceStatus === Status.LIVE) && (\n                  <span className=\"tile--body--botracestatus\">\n                    <img\n                      alt=\"Wolf bot\"\n                      src=\"/icons/wolfbot.svg\"\n                      height={16}\n                      width={16}\n                    />\n                    {contestTimelineObject.botRaceStatus === Status.UPCOMING &&\n                      \"1st hour: Bot Race\"}\n                    {contestTimelineObject.botRaceStatus === Status.LIVE &&\n                      \"Bot Race live\"}\n                  </span>\n                )}\n            </p>\n          </div>\n        </header>\n        <p className=\"tile--body--amount\">{amount}</p>\n      </div>\n      <footer className=\"tile--footer\">\n        <div className=\"tile--footer--details\">\n          <ContestStatus className=\"tile--footer--status\" status={status} />\n          <p className=\"tile--footer--timer\">Ends in</p>\n        </div>\n        <a\n          className=\"tile--footer--contestredirect\"\n          aria-label=\"View competition\"\n          href={`${contestUrl}#`}\n        >\n          {!findingsRepo || findingsRepo === \"\" ? \"Preview\" : \"View\"}{\" \"}\n          competition\n        </a>\n        <div className=\"tile--footer--dropdown\">\n          <button aria-label=\"See more contest options\">\n            <img\n              src=\"/icons/ellipsis.svg\"\n              alt=\"More options\"\n              width={32}\n              height={32}\n            />\n          </button>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default ContestTile;\n"],"names":[],"sourceRoot":""}