{"version":3,"file":"components-Tag-Tag-stories.7ad3ed43772f3451ad1b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAjBA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;ACAA","sources":["webpack://c4-ui/./src/components/Tag/Tag.tsx","webpack://c4-ui/./src/components/Tag/Tag.types.ts","webpack://c4-ui/./node_modules/clsx/dist/clsx.m.js"],"sourcesContent":["import clsx from \"clsx\";\nimport React from \"react\";\nimport { TagProps, TagVariant } from \"./Tag.types\";\n\nconst Tag: React.FC<TagProps> = ({ variant, iconLeft, label, className }) => {\n  const styling = clsx({\n    tag: true,\n    \"tag--white\": variant === TagVariant.WHITE,\n    \"tag--default\": variant === TagVariant.DEFAULT,\n    \"tag--blurple\": variant === TagVariant.BLURPLE,\n    \"tag--red\": variant === TagVariant.RED,\n    \"tag--yellow\": variant === TagVariant.YELLOW,\n    \"tag--white-outline\": variant === TagVariant.WHITE_OUTLINE,\n  });\n\n  return (\n    <div className={`${styling} ${className}`}>\n      {iconLeft && <img src={iconLeft} width={16} height={16} />}\n      {label}\n    </div>\n  );\n};\n\nexport default Tag;\n","export enum TagVariant {\n  WHITE = \"WHITE\",\n  DEFAULT = \"DEFAULT\",\n  BLURPLE = \"BLURPLE\",\n  RED = \"RED\",\n  YELLOW = \"YELLOW\",\n  WHITE_OUTLINE = \"WHITE-OUTLINE\",\n}\n\nexport interface TagProps {\n  /*  Style variant to be applied to rendered component */\n  variant?: TagVariant;\n  /* Relative path or absolute url to an icon/image. Renders icon to the left of label */\n  iconLeft?: string;\n  /* Label to be attached to the tag */\n  label: string;\n  /* String of custom classes to extend the default styling of the component. */\n  className?: string;\n}\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;"],"names":[],"sourceRoot":""}