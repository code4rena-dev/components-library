"use strict";
self["webpackHotUpdatec4_ui"]("components-Button-Button-stories",{

/***/ "./src/components/Button/Button.tsx":
/*!******************************************!*\
  !*** ./src/components/Button/Button.tsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! clsx */ "./node_modules/clsx/dist/clsx.m.js");
/* harmony import */ var _Button_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Button.types */ "./src/components/Button/Button.types.ts");
/* harmony import */ var _Button_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Button.scss */ "./src/components/Button/Button.scss");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");





/**
 * A stylized Code4rena button that can be rendered in 2 forms with 2 available variants.
 * This component will either render as a **button tag** or an **anchor tag** depending on whether or not the `href` prop is provided.
 *
 * __Available variants:__
 * - `PRIMARY`
 * - `SECONDARY`
 *
 * @param label - Label to be attached to the button.
 * @param type - HTML button element type.
 * @param variant - Style variant to be applied to rendered component.
 * @param disabled - Triggers disabled state of a button when enabled. Does not apply to links.
 * @param iconLeft - Relative path or absolute url to an icon/image. Renders icon to the left of label.
 * @param iconRight - Relative path or absolute url to an icon/image. Renders icon to the right of label.
 * @param size - Standard button size options
 * @param href - __Transforms button into a link.__ Relative path (in-app navigation) or absolute url (external navigation) of location to navigate to.
 * @param external - Determines whether navigation should occur on the same page or in a new tab.
 * @param onClick - Function to be triggered on button click. Does not apply to links.
 * @param className - String of custom classes to extend the default styling of the component.
 * @param id - Element identifier.
 */


const Button = ({
  label,
  type,
  variant,
  external,
  disabled,
  iconLeft,
  iconRight,
  size,
  href,
  onClick,
  className,
  id
}) => {
  const styling = (0,clsx__WEBPACK_IMPORTED_MODULE_4__["default"])({
    c4button: true,
    "button--primary": variant === _Button_types__WEBPACK_IMPORTED_MODULE_1__.ButtonVariant.PRIMARY,
    "button--secondary": variant === _Button_types__WEBPACK_IMPORTED_MODULE_1__.ButtonVariant.SECONDARY,
    wide: size === _Button_types__WEBPACK_IMPORTED_MODULE_1__.ButtonSize.WIDE
  });
  return href != null && href.length ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("a", {
    id: id ?? undefined,
    target: external ? "_blank" : undefined,
    rel: external ? "noreferrer noopener" : undefined,
    href: href,
    className: `${styling} ${className}`,
    children: [iconLeft && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("img", {
      alt: "",
      src: iconLeft,
      width: 16,
      height: 16
    }), label, iconRight && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("img", {
      alt: "",
      src: iconRight,
      width: 16,
      height: 16
    })]
  }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("button", {
    id: id ?? undefined,
    role: "button",
    "aria-label": label,
    "aria-disabled": disabled,
    type: type ?? "button",
    className: `${styling} ${className}`,
    onClick: onClick,
    disabled: disabled,
    children: [iconLeft && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("img", {
      alt: "",
      src: iconLeft,
      width: 16,
      height: 16
    }), label, iconRight && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("img", {
      alt: "",
      src: iconRight,
      width: 16,
      height: 16
    })]
  });
};
Button.defaultProps = {
  /* @ts-ignore value in Enum */
  type: "button",
  /* @ts-ignore value in Enum */
  variant: "PRIMARY",
  disabled: false,
  iconLeft: "",
  iconRight: "",
  /* @ts-ignore value in Enum */
  size: "NARROW",
  href: "",
  external: false,
  onClick: () => null,
  className: "",
  id: ""
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Button);
try {
    // @ts-ignore
    Button.displayName = "Button";
    // @ts-ignore
    Button.__docgenInfo = { "description": "A stylized Code4rena button that can be rendered in 2 forms with 2 available variants.\nThis component will either render as a **button tag** or an **anchor tag** depending on whether or not the `href` prop is provided.\n\n__Available variants:__\n- `PRIMARY`\n- `SECONDARY`", "displayName": "Button", "props": { "label": { "defaultValue": null, "description": "Label to be attached to the button.", "name": "label", "required": true, "type": { "name": "string" } }, "type": { "defaultValue": { value: "button" }, "description": "HTML button element type", "name": "type", "required": false, "type": { "name": "enum", "value": [{ "value": "\"button\"" }, { "value": "\"submit\"" }, { "value": "\"reset\"" }] } }, "variant": { "defaultValue": { value: "PRIMARY" }, "description": "Style variant to be applied to rendered component.", "name": "variant", "required": false, "type": { "name": "enum", "value": [{ "value": "\"PRIMARY\"" }, { "value": "\"SECONDARY\"" }] } }, "disabled": { "defaultValue": { value: "false" }, "description": "Triggers disabled state of a button when enabled. Does not apply to links.", "name": "disabled", "required": false, "type": { "name": "boolean" } }, "iconLeft": { "defaultValue": { value: "" }, "description": "Relative path or absolute url to an icon/image. Renders icon to the left of label.", "name": "iconLeft", "required": false, "type": { "name": "string" } }, "iconRight": { "defaultValue": { value: "" }, "description": "Relative path or absolute url to an icon/image. Renders icon to the right of label.", "name": "iconRight", "required": false, "type": { "name": "string" } }, "size": { "defaultValue": { value: "NARROW" }, "description": "Standard button size options", "name": "size", "required": false, "type": { "name": "enum", "value": [{ "value": "\"NARROW\"" }, { "value": "\"WIDE\"" }] } }, "href": { "defaultValue": { value: "" }, "description": "__Transforms button into a link.__ Relative path (in-app navigation) or absolute url (external navigation) of location to navigate to.", "name": "href", "required": false, "type": { "name": "string" } }, "external": { "defaultValue": { value: "false" }, "description": "Determines whether navigation should occur on the same page or in a new tab.", "name": "external", "required": false, "type": { "name": "boolean" } }, "onClick": { "defaultValue": { value: "() => null" }, "description": "Function to be triggered on button click. Does not apply to links.", "name": "onClick", "required": false, "type": { "name": "MouseEventHandler<HTMLButtonElement>" } }, "className": { "defaultValue": { value: "" }, "description": "String of custom classes to extend the default styling of the component.", "name": "className", "required": false, "type": { "name": "string" } }, "id": { "defaultValue": { value: "" }, "description": "Element identifier", "name": "id", "required": false, "type": { "name": "string" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/components/Button/Button.tsx#Button"] = { docgenInfo: Button.__docgenInfo, name: "Button", path: "src/components/Button/Button.tsx#Button" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ })

});
//# sourceMappingURL=components-Button-Button-stories.9faf4437677280ada4bd.hot-update.js.map